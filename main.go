package main

import (
	// "bytes"
	"encoding/json"
	"fmt"
	// "io/ioutil"
	"math"
	"math/big"
	// "net/http"
	// "strings"

	"strconv"
	"syscall/js"

	"github.com/fentec-project/gofe/data"
	"github.com/fentec-project/gofe/innerprod/fullysec"
)

func add(t js.Value, i []js.Value) interface{} {
	
	value1 := js.Global().Get("document").Call("getElementById", i[0].String()).Get("value").String()
	value2 := js.Global().Get("document").Call("getElementById", i[1].String()).Get("value").String()

	int1, _ := strconv.Atoi(value1)
	int2, _ := strconv.Atoi(value2)

	js.Global().Get("document").Call("getElementById", i[2].String()).Set("value", int1+int2)

	return nil
}

func getValue(param string) (float64, error) {
	a := js.Global().Get("document").Call("getElementById", param).
		Get("value").String()

	return strconv.ParseFloat(a, 64)
}


func risk(t js.Value, i []js.Value) interface{} {
	go func() {
		var pub = []byte{91, 55, 53, 55, 54, 52, 50, 56, 55, 57, 56, 56, 54, 53, 55, 52, 52, 53, 48, 48, 54, 51, 48, 48, 48, 57, 48, 53, 50, 51, 52, 57, 48, 53, 53, 57, 51, 54, 56, 55, 57, 53, 57, 53, 53, 48, 52, 51, 51, 54, 56, 50, 52, 55, 49, 53, 56, 56, 50, 50, 51, 54, 48, 53, 52, 55, 49, 53, 55, 50, 51, 48, 53, 56, 52, 52, 56, 53, 57, 49, 55, 53, 52, 51, 53, 56, 51, 48, 56, 49, 57, 52, 51, 54, 49, 55, 55, 48, 54, 52, 49, 57, 49, 48, 57, 54, 57, 53, 52, 51, 54, 52, 48, 57, 56, 53, 56, 53, 52, 56, 48, 49, 51, 51, 54, 52, 48, 51, 51, 57, 51, 55, 54, 51, 50, 53, 52, 49, 50, 48, 56, 55, 56, 55, 50, 48, 49, 51, 54, 55, 51, 54, 53, 48, 52, 44, 51, 51, 50, 56, 57, 55, 53, 52, 52, 48, 51, 55, 56, 54, 52, 49, 50, 54, 51, 57, 57, 49, 48, 52, 56, 51, 53, 55, 49, 53, 55, 49, 51, 53, 52, 51, 52, 55, 54, 48, 50, 53, 57, 54, 48, 57, 54, 51, 55, 51, 49, 57, 50, 49, 54, 54, 54, 51, 51, 54, 51, 52, 51, 51, 55, 54, 52, 53, 57, 49, 49, 49, 54, 52, 55, 57, 48, 54, 51, 49, 50, 56, 55, 54, 57, 52, 54, 53, 56, 54, 55, 54, 53, 52, 50, 56, 53, 52, 53, 51, 56, 55, 52, 55, 55, 48, 54, 55, 49, 48, 57, 53, 50, 57, 52, 55, 55, 57, 51, 51, 53, 57, 49, 54, 50, 49, 48, 52, 57, 56, 55, 53, 57, 53, 51, 53, 54, 51, 53, 55, 54, 48, 48, 52, 49, 53, 48, 49, 54, 51, 52, 52, 49, 49, 44, 50, 49, 50, 56, 50, 57, 49, 53, 56, 57, 50, 51, 56, 54, 51, 51, 55, 48, 51, 48, 57, 50, 50, 48, 56, 57, 53, 53, 52, 49, 49, 57, 53, 53, 50, 51, 51, 50, 55, 56, 56, 56, 52, 51, 52, 55, 49, 52, 53, 51, 55, 54, 56, 54, 55, 54, 56, 49, 57, 57, 48, 57, 53, 52, 57, 53, 49, 50, 51, 50, 53, 53, 50, 55, 51, 57, 54, 48, 53, 54, 52, 48, 55, 49, 57, 49, 49, 51, 57, 57, 51, 56, 52, 57, 55, 55, 53, 52, 48, 54, 55, 56, 55, 50, 50, 55, 48, 55, 53, 49, 54, 55, 48, 57, 51, 57, 51, 55, 54, 49, 55, 50, 52, 48, 49, 57, 49, 51, 51, 57, 49, 57, 49, 54, 49, 57, 55, 54, 48, 50, 57, 51, 50, 50, 51, 54, 50, 54, 52, 50, 51, 57, 51, 57, 44, 56, 55, 54, 48, 54, 57, 52, 57, 56, 48, 53, 52, 57, 56, 51, 54, 52, 55, 50, 54, 50, 51, 54, 55, 56, 52, 52, 55, 54, 51, 55, 55, 50, 49, 52, 49, 54, 52, 55, 55, 53, 51, 55, 53, 57, 49, 54, 51, 48, 49, 50, 54, 50, 50, 48, 50, 55, 52, 57, 53, 48, 57, 49, 57, 54, 55, 48, 53, 52, 55, 49, 52, 48, 51, 56, 54, 48, 54, 50, 49, 51, 51, 55, 50, 57, 55, 49, 48, 56, 54, 52, 55, 51, 51, 55, 55, 49, 57, 55, 57, 52, 57, 49, 55, 56, 51, 54, 52, 48, 49, 56, 55, 54, 50, 55, 55, 49, 54, 57, 52, 49, 54, 53, 53, 49, 54, 54, 49, 56, 53, 57, 48, 52, 55, 55, 50, 51, 49, 54, 50, 54, 48, 56, 50, 54, 56, 55, 51, 54, 56, 57, 48, 52, 44, 55, 57, 54, 51, 48, 55, 51, 52, 51, 50, 57, 49, 55, 55, 52, 56, 51, 53, 55, 55, 52, 55, 50, 50, 51, 55, 51, 54, 55, 56, 50, 57, 51, 52, 56, 56, 52, 49, 48, 56, 50, 55, 48, 55, 55, 55, 50, 52, 55, 48, 56, 51, 52, 53, 57, 49, 52, 52, 57, 50, 52, 48, 56, 48, 51, 57, 50, 49, 48, 52, 52, 49, 53, 49, 50, 56, 54, 49, 56, 48, 56, 54, 55, 55, 55, 54, 57, 54, 54, 51, 55, 48, 52, 57, 55, 55, 49, 55, 51, 52, 53, 49, 48, 57, 56, 49, 55, 50, 56, 52, 51, 49, 48, 49, 52, 53, 54, 53, 55, 50, 51, 54, 52, 57, 54, 57, 54, 51, 49, 50, 49, 53, 50, 53, 56, 48, 56, 51, 55, 48, 51, 54, 53, 50, 49, 55, 57, 51, 50, 55, 52, 54, 51, 57, 44, 56, 54, 54, 52, 54, 53, 48, 54, 53, 52, 49, 50, 48, 54, 56, 55, 50, 51, 50, 51, 55, 51, 54, 52, 50, 50, 54, 52, 49, 50, 48, 50, 52, 55, 57, 54, 55, 48, 51, 55, 51, 49, 48, 57, 57, 51, 51, 51, 54, 55, 55, 50, 48, 56, 54, 49, 55, 48, 57, 50, 54, 50, 53, 52, 48, 53, 55, 52, 57, 57, 48, 55, 50, 54, 53, 53, 49, 57, 51, 55, 52, 52, 55, 53, 55, 55, 51, 49, 53, 57, 50, 53, 56, 52, 54, 52, 57, 57, 48, 52, 51, 51, 54, 56, 49, 54, 52, 52, 56, 51, 48, 50, 54, 56, 57, 56, 52, 56, 50, 56, 48, 50, 57, 52, 56, 52, 56, 56, 54, 53, 48, 56, 50, 56, 52, 49, 48, 55, 51, 54, 52, 55, 50, 54, 48, 57, 50, 51, 48, 56, 51, 50, 50, 44, 49, 56, 48, 55, 55, 50, 52, 55, 57, 55, 49, 55, 49, 50, 51, 51, 51, 49, 53, 49, 48, 56, 53, 55, 57, 51, 49, 51, 57, 51, 51, 51, 53, 57, 55, 53, 55, 53, 57, 49, 53, 49, 50, 57, 54, 53, 56, 52, 51, 50, 57, 53, 55, 49, 55, 55, 52, 54, 49, 53, 50, 57, 52, 54, 57, 55, 55, 54, 55, 53, 52, 50, 51, 49, 51, 52, 55, 54, 48, 54, 52, 56, 55, 50, 50, 48, 56, 51, 55, 52, 50, 55, 54, 50, 51, 48, 55, 52, 54, 52, 55, 52, 56, 49, 55, 50, 54, 55, 52, 54, 52, 55, 50, 57, 51, 55, 56, 57, 50, 55, 52, 52, 49, 54, 52, 57, 55, 51, 53, 54, 54, 50, 50, 53, 55, 57, 51, 53, 52, 52, 48, 57, 54, 55, 50, 57, 48, 51, 53, 52, 50, 57, 52, 55, 44, 55, 55, 54, 51, 56, 53, 48, 48, 56, 54, 49, 50, 57, 53, 57, 57, 54, 50, 55, 52, 57, 54, 57, 57, 50, 50, 56, 55, 48, 56, 51, 49, 52, 55, 55, 52, 49, 53, 49, 51, 53, 53, 49, 49, 57, 53, 57, 55, 48, 54, 48, 49, 50, 48, 51, 49, 48, 52, 55, 52, 49, 54, 57, 57, 54, 51, 48, 56, 57, 50, 48, 56, 53, 50, 54, 53, 49, 48, 48, 49, 48, 57, 56, 50, 57, 52, 56, 54, 52, 49, 53, 51, 57, 52, 52, 52, 53, 55, 54, 53, 56, 55, 48, 51, 52, 49, 52, 48, 56, 50, 50, 56, 56, 49, 52, 55, 50, 49, 56, 50, 52, 57, 52, 56, 52, 54, 48, 49, 49, 49, 49, 49, 56, 56, 49, 55, 53, 55, 55, 49, 54, 57, 55, 51, 50, 53, 52, 55, 50, 57, 50, 55, 49, 50, 93}
		var p = []byte{123, 34, 80, 97, 114, 97, 109, 115, 34, 58, 123, 34, 76, 34, 58, 56, 44, 34, 78, 34, 58, 57, 53, 57, 50, 50, 53, 57, 49, 51, 48, 54, 55, 51, 51, 56, 48, 54, 55, 50, 52, 48, 49, 49, 57, 51, 51, 48, 48, 50, 50, 55, 51, 51, 52, 54, 53, 54, 56, 56, 52, 55, 57, 49, 54, 54, 54, 50, 54, 50, 51, 52, 48, 55, 50, 53, 57, 51, 48, 51, 53, 54, 52, 55, 57, 48, 57, 51, 52, 49, 56, 54, 56, 57, 50, 48, 57, 51, 44, 34, 78, 83, 113, 117, 97, 114, 101, 34, 58, 57, 50, 48, 49, 49, 52, 51, 53, 50, 50, 57, 57, 56, 54, 56, 52, 48, 55, 48, 54, 48, 54, 53, 50, 49, 50, 52, 52, 51, 57, 54, 52, 52, 52, 55, 48, 56, 56, 53, 49, 54, 48, 51, 55, 50, 50, 57, 56, 57, 54, 57, 52, 50, 55, 54, 55, 48, 49, 57, 54, 56, 52, 52, 51, 55, 49, 51, 56, 52, 48, 49, 56, 54, 57, 50, 49, 48, 53, 50, 48, 50, 48, 49, 51, 53, 53, 53, 57, 57, 53, 52, 49, 57, 53, 52, 52, 49, 53, 54, 52, 57, 50, 51, 52, 51, 50, 48, 56, 53, 48, 54, 53, 54, 56, 53, 56, 51, 50, 48, 56, 57, 48, 49, 51, 55, 54, 56, 52, 48, 50, 52, 56, 52, 54, 51, 51, 53, 54, 48, 50, 57, 56, 51, 55, 56, 52, 50, 53, 57, 50, 48, 54, 52, 57, 44, 34, 66, 111, 117, 110, 100, 88, 34, 58, 49, 56, 52, 52, 54, 55, 52, 52, 48, 55, 51, 55, 48, 57, 53, 53, 49, 54, 49, 54, 44, 34, 66, 111, 117, 110, 100, 89, 34, 58, 49, 56, 52, 52, 54, 55, 52, 52, 48, 55, 51, 55, 48, 57, 53, 53, 49, 54, 49, 54, 44, 34, 83, 105, 103, 109, 97, 34, 58, 34, 51, 46, 50, 50, 52, 48, 57, 48, 54, 50, 55, 55, 57, 49, 53, 57, 53, 56, 49, 57, 48, 52, 50, 49, 50, 49, 55, 54, 54, 49, 48, 53, 48, 56, 51, 54, 56, 54, 57, 54, 56, 48, 55, 49, 49, 55, 54, 57, 54, 56, 52, 56, 53, 48, 52, 52, 55, 49, 51, 56, 57, 50, 55, 57, 54, 49, 48, 51, 56, 57, 51, 51, 54, 51, 54, 48, 57, 50, 49, 53, 49, 55, 49, 48, 53, 54, 57, 53, 56, 50, 57, 55, 50, 48, 57, 53, 56, 53, 55, 49, 51, 49, 49, 52, 56, 57, 50, 48, 50, 51, 54, 51, 55, 50, 53, 51, 53, 50, 55, 52, 56, 57, 53, 49, 51, 55, 52, 55, 50, 55, 49, 56, 57, 48, 56, 53, 55, 54, 49, 52, 55, 50, 50, 57, 50, 54, 56, 48, 57, 50, 49, 56, 57, 54, 48, 55, 51, 52, 50, 57, 53, 52, 55, 54, 55, 51, 57, 53, 54, 56, 52, 52, 48, 53, 53, 49, 55, 56, 57, 53, 54, 56, 51, 55, 56, 54, 55, 57, 50, 49, 54, 49, 49, 55, 50, 101, 43, 49, 57, 51, 34, 44, 34, 76, 97, 109, 98, 100, 97, 34, 58, 49, 50, 56, 44, 34, 71, 34, 58, 52, 48, 52, 50, 49, 52, 50, 57, 51, 48, 57, 57, 56, 48, 48, 56, 52, 57, 56, 56, 48, 51, 54, 51, 53, 50, 48, 49, 50, 55, 49, 54, 54, 55, 54, 49, 53, 57, 57, 55, 55, 49, 53, 51, 55, 50, 48, 56, 54, 55, 52, 52, 57, 57, 48, 54, 53, 55, 53, 51, 56, 53, 50, 53, 53, 53, 48, 55, 54, 57, 57, 54, 49, 50, 50, 50, 56, 56, 51, 56, 54, 51, 48, 52, 54, 54, 54, 54, 52, 57, 51, 55, 56, 50, 57, 53, 57, 52, 48, 49, 57, 52, 55, 57, 57, 54, 48, 55, 51, 56, 52, 57, 49, 52, 55, 56, 51, 51, 48, 51, 52, 50, 56, 50, 56, 53, 49, 50, 56, 53, 52, 52, 55, 56, 56, 54, 49, 51, 56, 55, 50, 49, 55, 56, 52, 48, 49, 55, 50, 50, 57, 56, 53, 49, 125, 125}

		var paillier fullysec.Paillier
		if err := json.Unmarshal(p, &paillier); err != nil {
			fmt.Errorf("Error during paillier unmarshal: %v", err)
		}

		var masterPubKey data.Vector
		if err := json.Unmarshal(pub, &masterPubKey); err != nil {
			fmt.Errorf("Error during pub key unmarshal: %v", err)
		}

		var age, systolicBP, totalCh, hdlCh, factor float64
		factor = 100000
		factorInt := 100000
		var err error

		age, err = getValue("age")
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println("=======================")
		fmt.Println(age)

		systolicBP, err = getValue("systolicBP")
		if err != nil {
			fmt.Println(err)
		}

		totalCh, err = getValue("totalCh")
		if err != nil {
			fmt.Println(err)
		}

		hdlCh, err = getValue("hdlCh")
		if err != nil {
			fmt.Println(err)
		}

		ageLog := math.Log(age)
		systolicBPLog := math.Log(systolicBP)
		totalChLog := math.Log(totalCh)
		hdlChLog := math.Log(hdlCh)

		ageLog *= factor
		systolicBPLog *= factor
		totalChLog *= factor
		hdlChLog *= factor

		isMale := 0
		smoker := 0

		treatedBP := 0
		diabetic := 0

		ageInt := big.NewInt(int64(math.Round(ageLog)))
		systolicBPInt := big.NewInt(int64(math.Round(systolicBPLog)))
		totalChInt := big.NewInt(int64(math.Round(totalChLog)))
		hdlChInt := big.NewInt(int64(math.Round(hdlChLog)))

		isMaleInt := big.NewInt(int64(isMale * factorInt))
		smokerInt := big.NewInt(int64(smoker * factorInt))
		treatedBPInt := big.NewInt(int64(treatedBP * factorInt))
		diabeticInt := big.NewInt(int64(diabetic * factorInt))
		
		x := data.NewVector([]*big.Int{isMaleInt, ageInt, systolicBPInt, totalChInt, hdlChInt, smokerInt,
			treatedBPInt, diabeticInt})

		ciphertext, err := paillier.Encrypt(x, masterPubKey)
		if err != nil {
			fmt.Errorf("Error during encryption: %v", err)
		}

		jsonValue, _ := json.Marshal(ciphertext)

		fmt.Println(jsonValue)
		fmt.Println(ciphertext)

		el := js.Global().Get("document").Call("getElementById", "result")
		el.Set("value", "foo")

	}()
	return nil
}

func registerCallbacks() {
	js.Global().Set("risk", js.FuncOf(risk))

	js.Global().Set("add", js.FuncOf(add))
}

func main() {
	c := make(chan struct{}, 0)

	println("WASM Go Initialized")
	// register functions
	registerCallbacks()

	<-c
}
